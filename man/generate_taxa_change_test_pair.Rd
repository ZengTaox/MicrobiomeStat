% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_taxa_change_test_pair.R
\name{generate_taxa_change_test_pair}
\alias{generate_taxa_change_test_pair}
\title{Compute taxa changes between time points and analyze differential abundance between groups}
\usage{
generate_taxa_change_test_pair(
  data.obj,
  subject.var,
  time.var = NULL,
  group.var = NULL,
  adj.vars = NULL,
  change.base,
  feature.change.func = "relative change",
  feature.level,
  prev.filter = 0.1,
  abund.filter = 1e-04,
  feature.dat.type = c("count", "proportion", "other"),
  ...
)
}
\arguments{
\item{data.obj}{A list object in a format specific to MicrobiomeStat, which can include components such as feature.tab (matrix), feature.ann (matrix), meta.dat (data.frame), tree, and feature.agg.list (list). The data.obj can be converted from other formats using several functions from the MicrobiomeStat package, including: 'mStat_convert_DGEList_to_data_obj', 'mStat_convert_DESeqDataSet_to_data_obj', 'mStat_convert_phyloseq_to_data_obj', 'mStat_convert_SummarizedExperiment_to_data_obj', 'mStat_import_qiime2_as_data_obj', 'mStat_import_mothur_as_data_obj', 'mStat_import_dada2_as_data_obj', and 'mStat_import_biom_as_data_obj'. Alternatively, users can construct their own data.obj. Note that not all components of data.obj may be required for all functions in the MicrobiomeStat package.}

\item{subject.var}{The name of the subject variable column in the metadata.}

\item{time.var}{The name of the time variable column in the metadata (optional).}

\item{group.var}{The name of the grouping variable column for linear modeling in the metadata.}

\item{adj.vars}{Names of additional variables to be used as covariates in the analysis.}

\item{change.base}{The baseline time point for detecting changes in taxa. If NULL, the first unique value from the time.var column will be used (optional).}

\item{feature.change.func}{Specifies the method or function used to compute the change between two time points. Options include:

- "absolute change" (default): Computes the absolute difference between the values at the two time points (`value_time_2` and `value_time_1`).

- "log fold change": Computes the log2 fold change between the two time points. For zero values, imputation is performed using half of the minimum nonzero value for each feature level at the respective time point before taking the logarithm.

- "relative change": Computes the relative change as `(value_time_2 - value_time_1) / (value_time_2 + value_time_1)`. If both time points have a value of 0, the change is defined as 0.

- A custom function: If a user-defined function is provided, it should take two numeric vectors as input corresponding to the values at the two time points (`value_time_1` and `value_time_2`) and return a numeric vector of the computed change. This custom function will be applied directly to calculate the difference.}

\item{feature.level}{The column name in the feature annotation matrix (feature.ann) of data.obj
to use for summarization and plotting. This can be the taxonomic level like "Phylum", or any other
annotation columns like "Genus" or "OTU_ID". Should be a character vector specifying one or more
column names in feature.ann. Multiple columns can be provided, and data will be plotted separately
for each column. Default is NULL, which defaults to all columns in feature.ann if `features.plot`
is also NULL.}

\item{prev.filter}{Numeric value specifying the minimum prevalence threshold for filtering
taxa before analysis. Taxa with prevalence below this value will be removed.
Prevalence is calculated as the proportion of samples where the taxon is present.
Default 0 removes no taxa by prevalence filtering.}

\item{abund.filter}{Numeric value specifying the minimum abundance threshold for filtering
taxa before analysis. Taxa with mean abundance below this value will be removed.
Abundance refers to counts or proportions depending on \code{feature.dat.type}.
Default 0 removes no taxa by abundance filtering.}

\item{feature.dat.type}{The type of the feature data, which determines how the data is handled in downstream analyses.
Should be one of:
- "count": Raw count data, will be normalized by the function.
- "proportion": Data that has already been normalized to proportions/percentages.
- "other": Custom abundance data that has unknown scaling. No normalization applied.
The choice affects preprocessing steps as well as plot axis labels.
Default is "count", which assumes raw OTU table input.}

\item{...}{Additional parameters to be passed to the ZicoSeq function.}
}
\value{
A named list where each element corresponds to a feature level and contains a dataframe with the calculated taxa changes, their corresponding p-values, and other statistics from the linear model.
}
\description{
This function calculates taxa abundance changes between two time points in the metadata, using the time values specified in `time.var` and baseline `change.base`.
It computes changes based on the method in `feature.change.func`.
The function then uses the ZicoSeq method to perform differential abundance analysis between the groups in `group.var`, adjusted for `adj.vars`.
It returns data frames summarizing the results of the differential abundance tests for each taxonomic level in `feature.level`.
If `time.var` is not provided, the first unique value in the metadata will be used as `change.base`.
If only one time value exists, the function will exit with a message.
}
\examples{
\dontrun{
data(peerj32.obj)

generate_taxa_change_test_pair(
  data.obj = peerj32.obj,
  subject.var = "subject",
  time.var = "time",
  group.var = "group",
  adj.vars = "sex",
  change.base = "1",
  feature.change.func = "log fold change",
  feature.level = c("Genus"),
  prev.filter = 0.1,
  abund.filter = 1e-4,
  feature.dat.type = "count"
)

data(subset_pairs.obj)
generate_taxa_change_test_pair(
  data.obj = subset_pairs.obj,
  subject.var = "MouseID",
  time.var = "Antibiotic",
  group.var = "Sex",
  adj.vars = NULL,
  change.base = "Baseline",
  feature.change.func = "log fold change",
  feature.level = c("Genus"),
  prev.filter = 0.1,
  abund.filter = 1e-4,
  feature.dat.type = "count"
)
}

}
