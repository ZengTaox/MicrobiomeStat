% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_beta_pc_spaghettiplot_long.R
\name{generate_beta_pc_spaghettiplot_long}
\alias{generate_beta_pc_spaghettiplot_long}
\title{Generate spaghetti plots of beta diversity over time}
\usage{
generate_beta_pc_spaghettiplot_long(
  data.obj = NULL,
  dist.obj = NULL,
  pc.obj = NULL,
  pc.ind = c(1, 2),
  subject.var,
  time.var,
  t0.level = NULL,
  ts.levels = NULL,
  group.var = NULL,
  strata.var = NULL,
  adj.vars = NULL,
  dist.name = c("BC"),
  base.size = 16,
  theme.choice = "prism",
  custom.theme = NULL,
  palette = NULL,
  pdf = TRUE,
  file.ann = NULL,
  pdf.wid = 11,
  pdf.hei = 8.5,
  ...
)
}
\arguments{
\item{data.obj}{A list object in a format specific to MicrobiomeStat, which can include components such as feature.tab (matrix), feature.ann (matrix), meta.dat (data.frame), tree, and feature.agg.list (list). The data.obj can be converted from other formats using several functions from the MicrobiomeStat package, including: 'mStat_convert_DGEList_to_data_obj', 'mStat_convert_DESeqDataSet_to_data_obj', 'mStat_convert_phyloseq_to_data_obj', 'mStat_convert_SummarizedExperiment_to_data_obj', 'mStat_import_qiime2_as_data_obj', 'mStat_import_mothur_as_data_obj', 'mStat_import_dada2_as_data_obj', and 'mStat_import_biom_as_data_obj'. Alternatively, users can construct their own data.obj. Note that not all components of data.obj may be required for all functions in the MicrobiomeStat package.}

\item{dist.obj}{Distance matrix between samples, usually calculated using
\code{\link[MicrobiomeStat]{mStat_calculate_beta_diversity}} function.
If NULL, beta diversity will be automatically computed from \code{data.obj}
using \code{mStat_calculate_beta_diversity}.}

\item{pc.obj}{A list containing the results of dimension reduction/Principal Component Analysis.
This should be the output from functions like \code{\link[MicrobiomeStat]{mStat_calculate_PC}}, containing the PC coordinates and other metadata.
If NULL (default), dimension reduction will be automatically performed using metric multidimensional scaling (MDS) via \code{\link[MicrobiomeStat]{mStat_calculate_PC}}.
The pc.obj list structure should contain:
\itemize{
 \item{$points:}{A matrix with samples as rows and PCs as columns containing the coordinates.}
 \item{$eig:}{Eigenvalues for each PC dimension.}
 \item{$vectors:}{Loadings vectors for features onto each PC.}
 \item{Other metadata like $method, $dist.name, etc.}
}
See \code{\link[MicrobiomeStat]{mStat_calculate_PC}} function for details on output format.}

\item{pc.ind}{Numeric vector indicating which Principal Coordinates to plot.}

\item{subject.var}{Character string indicating the variable for subject identifiers.}

\item{time.var}{Character string indicating the variable for time points.}

\item{t0.level}{Character or numeric, baseline time point for longitudinal analysis, e.g. "week_0" or 0. Required.}

\item{ts.levels}{Character vector, names of follow-up time points, e.g. c("week_4", "week_8"). Required.}

\item{group.var}{Character string indicating the variable for group identifiers.}

\item{strata.var}{Character string indicating the variable for stratum identifiers.}

\item{adj.vars}{A character vector containing the names of the columns in data.obj$meta.dat to include as covariates in the PERMANOVA analysis. If no covariates are needed, use NULL (default).}

\item{dist.name}{Vector of character strings indicating the distance measures to include in the plot.}

\item{base.size}{Numeric value indicating the base font size for the plot.}

\item{theme.choice}{Plot theme choice. Can be one of:
  - "prism": ggprism::theme_prism()
  - "classic": theme_classic()
  - "gray": theme_gray()
  - "bw": theme_bw()
Default is "bw".}

\item{custom.theme}{A custom ggplot theme provided as a ggplot2 theme object. This allows users to override the default theme and provide their own theme for plotting. To use a custom theme, first create a theme object with ggplot2::theme(), then pass it to this argument. For example:

```r
my_theme <- ggplot2::theme(
  axis.title = ggplot2::element_text(size=16, color="red"),
  legend.position = "none"
)
```

Then pass `my_theme` to `custom.theme`. Default is NULL, which will use the default theme based on `theme.choice`.}

\item{palette}{An optional parameter specifying the color palette to be used for the plot.
It can be either a character string specifying the name of a predefined
palette or a vector of color codes in a format accepted by ggplot2
(e.g., hexadecimal color codes). Available predefined palettes include
'npg', 'aaas', 'nejm', 'lancet', 'jama', 'jco', and 'ucscgb', inspired
by various scientific publications and the `ggsci` package. If `palette`
is not provided or an unrecognized palette name is given, a default color
palette will be used. Ensure the number of colors in the palette is at
least as large as the number of groups being plotted.}

\item{pdf}{Logical indicating whether to save the plot as a PDF file.}

\item{file.ann}{Optional character string to append to the file name.}

\item{pdf.wid}{Numeric value indicating the width of the PDF file.}

\item{pdf.hei}{Numeric value indicating the height of the PDF file.}

\item{...}{Additional arguments to be passed to the plotting function.}
}
\value{
A list of ggplot objects for each distance measure and Principal Coordinate.
}
\description{
This function generates spaghetti plots of beta diversity metrics over time for longitudinal microbiome studies.
It allows plotting principal coordinates from different dimension reduction methods such as PCoA, NMDS, tSNE or UMAP.
By default it uses PCoA for dimension reduction.
}
\examples{
\dontrun{

# Load required libraries and data
library(vegan)

# Example with ecam.obj dataset
data(ecam.obj)
dist.obj <- mStat_calculate_beta_diversity(ecam.obj, "BC")
pc.obj <- mStat_calculate_PC(dist.obj)
generate_beta_pc_spaghettiplot_long(
  data.obj = ecam.obj,
  dist.obj = NULL,
  pc.obj = NULL,
  subject.var = "studyid",
  time.var = "month",
  t0.level = "0",
  ts.levels = as.character(sort(as.numeric(unique(ecam.obj$meta.dat$month))))[2:10],
  group.var = "diet",
  strata.var = "delivery",
  adj.vars = NULL,
  dist.name = c('BC'),
  base.size = 20,
  theme.choice = "bw",
  custom.theme = NULL,
  palette = NULL,
  pdf = TRUE,
  file.ann = NULL,
  pdf.wid = 11,
  pdf.hei = 8.5
)
generate_beta_pc_spaghettiplot_long(
  data.obj = ecam.obj,
  dist.obj = NULL,
  pc.obj = NULL,
  subject.var = "studyid",
  time.var = "month",
  t0.level = "0",
  ts.levels = as.character(sort(as.numeric(unique(ecam.obj$meta.dat$month))))[2:10],
  group.var = "diet",
  strata.var = NULL,
  adj.vars = NULL,
  dist.name = c('BC'),
  base.size = 20,
  theme.choice = "bw",
  custom.theme = NULL,
  palette = NULL,
  pdf = TRUE,
  file.ann = NULL,
  pdf.wid = 11,
  pdf.hei = 8.5
)
# Example with peerj32.obj dataset
data(peerj32.obj)
generate_beta_pc_spaghettiplot_long(
  data.obj = peerj32.obj,
  dist.obj = NULL,
  pc.obj = NULL,
  subject.var = "subject",
  time.var = "time",
  t0.level = "1",
  ts.levels = "2",
  group.var = "group",
  strata.var = "sex",
  adj.vars = NULL,
  dist.name = c('BC'),
  base.size = 20,
  theme.choice = "bw",
  custom.theme = NULL,
  palette = NULL,
  pdf = TRUE,
  file.ann = NULL,
  pdf.wid = 11,
  pdf.hei = 8.5
)
generate_beta_pc_spaghettiplot_long(
  data.obj = peerj32.obj,
  dist.obj = NULL,
  pc.obj = NULL,
  subject.var = "subject",
  time.var = "time",
  t0.level = "1",
  ts.levels = "2",
  group.var = "group",
  strata.var = NULL,
  adj.vars = NULL,
  dist.name = c('BC'),
  base.size = 20,
  theme.choice = "bw",
  custom.theme = NULL,
  palette = NULL,
  pdf = TRUE,
  file.ann = NULL,
  pdf.wid = 11,
  pdf.hei = 8.5
)
}
}
